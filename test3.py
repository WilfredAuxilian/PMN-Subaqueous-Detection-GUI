#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0 with integrated functions and dataset model selection
# Current date: April 07, 2025

import sys
import tkinter as tk
import tkinter.ttk as ttk
import tkinter.filedialog as filedialog
import tkinter.messagebox as messagebox
from tkinter.constants import *
import os.path
import cv2
import numpy as np
from PIL import Image, ImageTk
import time
from ultralytics import YOLO  # For YOLO model integration

_location = os.path.dirname(__file__)

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black'
_tabfg2 = 'white'
_bgmode = 'light'
_tabbg1 = '#d9d9d9'
_tabbg2 = 'gray40'

# Global variables
current_image = None
cap = None
camera_window = None
model_paths = {}
CAPTURE_PATH = "D:/NIOT/GUI_Application/Babu_K_Sairam_GUI_Code/captured_images"

if not os.path.exists(CAPTURE_PATH):
    os.makedirs(CAPTURE_PATH)

_style_code_ran = 0

def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    try:
        root.tk.call('source', os.path.join(_location, 'themes', 'default.tcl'))
    except:
        pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font="TkDefaultFont")
    if sys.platform == "win32":
        style.theme_use('winnative')
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        top.geometry("1536x793+-8+-8")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1, 1)
        top.title("Toplevel 0")
        top.configure(borderwidth="7", background="#a09ec7", highlightbackground="#d9d9d9",
                      highlightcolor="#000000", takefocus="50")

        self.top = top
        self.che63 = tk.IntVar()  # IP Cameras
        self.che64 = tk.IntVar()  # Static Camera
        self.che51 = tk.IntVar()  # Algae
        self.che47 = tk.IntVar()  # PMN
        self.che48 = tk.IntVar()  # Fish
        self.che49 = tk.IntVar()  # Coral Reef

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        _style_code()
        self.Option_label = ttk.Label(self.top, text='''Options''')
        self.Option_label.place(relx=0.762, rely=0.605, height=27, width=62)
        self.Option_label.configure(background="#7787d2", font="-family {Segoe UI} -size 12", relief="flat", anchor='center')

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=-0.007, rely=-0.013, relheight=0.218, relwidth=1.02)
        self.Frame1.configure(relief='groove', borderwidth="2", background="#ffffff",
                              highlightbackground="#d9d9d9", highlightcolor="#000000")

        # Input Parameters Frame
        self.Labelframe3 = tk.LabelFrame(self.Frame1, text='''INPUT PARAMETERS''')
        self.Labelframe3.place(relx=0.501, rely=0.058, relheight=0.925, relwidth=0.25)
        self.Labelframe3.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#efefef", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Scale1 = tk.Scale(self.Labelframe3, from_=0.0, to=100.0, resolution=1.0, command=self.update_values)
        self.Scale1.place(relx=0.444, rely=0.125, relheight=0.263, relwidth=0.431)
        self.Scale1.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 9",
                              foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="#000000",
                              length="166", orient="horizontal", troughcolor="#c4c4c4")

        self.Scale2 = tk.Scale(self.Labelframe3, from_=0.0, to=100.0, resolution=1.0, command=self.update_values)
        self.Scale2.place(relx=0.444, rely=0.438, relheight=0.263, relwidth=0.431)
        self.Scale2.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 9",
                              foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="#000000",
                              length="166", orient="horizontal", troughcolor="#c4c4c4")

        self.Entry1 = tk.Entry(self.Labelframe3)
        self.Entry1.place(relx=0.444, rely=0.781, height=20, relwidth=0.418, bordermode='ignore')
        self.Entry1.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="#000000",
                              insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")
        self.Entry1.bind("<Return>", lambda event: self.update_values(None))

        self.Label13 = tk.Label(self.Labelframe3, text='''Min Neighbour''')
        self.Label13.place(relx=0.051, rely=0.2, height=26, width=127, bordermode='ignore')
        self.Label13.configure(background="#efefef", font="-family {Segoe UI} -size 9", foreground="#000000")

        self.Label14 = tk.Label(self.Labelframe3, text='''Scaling Factor''')
        self.Label14.place(relx=0.051, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Label14.configure(background="#efefef", font="-family {Segoe UI} -size 9", foreground="#000000")

        self.Label15 = tk.Label(self.Labelframe3, text='''Focal Length''')
        self.Label15.place(relx=0.051, rely=0.75, height=26, width=127, bordermode='ignore')
        self.Label15.configure(background="#efefef", font="-family {Segoe UI} -size 9", foreground="#000000")

        # Post Processing Frame
        self.Labelframe1 = tk.LabelFrame(self.Frame1, text='''POST PROCESSING''')
        self.Labelframe1.place(relx=-0.006, rely=0.058, relheight=0.925, relwidth=0.138)
        self.Labelframe1.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#efefef", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Button1 = tk.Button(self.Labelframe1, text='''Browse Image''', command=self.browse_image)
        self.Button1.place(relx=0.231, rely=0.188, height=26, width=127, bordermode='ignore')
        self.Button1.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button2 = tk.Button(self.Labelframe1, text='''Browse Video''', command=self.browse_video)
        self.Button2.place(relx=0.231, rely=0.438, height=26, width=127, bordermode='ignore')
        self.Button2.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button3 = tk.Button(self.Labelframe1, text='''Apply changes''', command=self.apply_changes)
        self.Button3.place(relx=0.231, rely=0.688, height=26, width=127, bordermode='ignore')
        self.Button3.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        # Real Time Detection Frame
        self.Labelframe2 = tk.LabelFrame(self.Frame1, text='''REAL TIME DETECTION''')
        self.Labelframe2.place(relx=0.128, rely=0.058, relheight=0.925, relwidth=0.374)
        self.Labelframe2.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#efefef", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Button4 = tk.Button(self.Labelframe2, text='''Single Camera''', command=self.single_camera_view)
        self.Button4.place(relx=0.036, rely=0.125, height=26, width=127, bordermode='ignore')
        self.Button4.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button8 = tk.Button(self.Labelframe2, text='''Pop Out''', command=self.multiple_camera_popout)
        self.Button8.place(relx=0.295, rely=0.313, height=26, width=57, bordermode='ignore')
        self.Button8.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button5 = tk.Button(self.Labelframe2, text='''Multiple Camera''', command=self.multiple_camera_view)
        self.Button5.place(relx=0.036, rely=0.313, height=26, width=127, bordermode='ignore')
        self.Button5.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button6 = tk.Button(self.Labelframe2, text='''Capture''', command=self.single_camera_capture)
        self.Button6.place(relx=0.418, rely=0.125, height=26, width=57, bordermode='ignore')
        self.Button6.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button7 = tk.Button(self.Labelframe2, text='''Capture''', command=self.multiple_camera_capture)
        self.Button7.place(relx=0.418, rely=0.313, height=26, width=57, bordermode='ignore')
        self.Button7.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Button10 = tk.Button(self.Labelframe2, text='''Image Stitching''', command=self.image_stitching)
        self.Button10.place(relx=0.036, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Button10.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                highlightcolor="#000000")

        self.Button12 = tk.Button(self.Labelframe2, text='''360 view''', command=self.three_sixty_view)
        self.Button12.place(relx=0.157, rely=0.688, height=36, width=157, bordermode='ignore')
        self.Button12.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                highlightcolor="#000000")

        self.Button11 = tk.Button(self.Labelframe2, text='''Video Stitching''', command=self.video_stitching)
        self.Button11.place(relx=0.295, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Button11.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                highlightcolor="#000000")

        self.Button9 = tk.Button(self.Labelframe2, text='''Pop Out''', command=self.single_camera_popout)
        self.Button9.place(relx=0.295, rely=0.125, height=26, width=57, bordermode='ignore')
        self.Button9.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="#000000")

        self.Checkbutton6 = tk.Checkbutton(self.Labelframe2, text='''IP CAMERAS''', variable=self.che63, command=self.toggle_ip_entry)
        self.Checkbutton6.place(relx=0.546, rely=0.125, relheight=0.219, relwidth=0.172, bordermode='ignore')
        self.Checkbutton6.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Checkbutton7 = tk.Checkbutton(self.Labelframe2, text='''STATIC CAMERA''', variable=self.che64)
        self.Checkbutton7.place(relx=0.751, rely=0.125, relheight=0.219, relwidth=0.222, bordermode='ignore')
        self.Checkbutton7.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe2, text='''ALGAE''', variable=self.che51,
                                           command=lambda: self.select_model("Algae"))
        self.Checkbutton5.place(relx=0.631, rely=0.813, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe2, text='''PMN''', variable=self.che47,
                                           command=lambda: self.select_model("PMN"))
        self.Checkbutton1.place(relx=0.7, rely=0.563, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Checkbutton2 = tk.Checkbutton(self.Labelframe2, text='''FISH''', variable=self.che48,
                                           command=lambda: self.select_model("Fish"))
        self.Checkbutton2.place(relx=0.563, rely=0.563, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton2.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Checkbutton3 = tk.Checkbutton(self.Labelframe2, text='''CORAL REEF''', variable=self.che49,
                                           command=lambda: self.select_model("Coral Reef"))
        self.Checkbutton3.place(relx=0.836, rely=0.563, relheight=0.156, relwidth=0.139, bordermode='ignore')
        self.Checkbutton3.configure(activebackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3",
                                    font="-family {Segoe UI} -size 9", foreground="#000000", highlightbackground="#d9d9d9",
                                    highlightcolor="#000000", justify='left', anchor='w')

        self.Label12 = tk.Label(self.Labelframe2, text='''Datasets''')
        self.Label12.place(relx=0.666, rely=0.438, height=21, width=125, bordermode='ignore')
        self.Label12.configure(activebackground="#d9d9d9", background="#efefef", disabledforeground="#a3a3a3",
                               font="-family {Segoe UI} -size 9 -weight bold", foreground="#000000",
                               highlightbackground="#d9d9d9", highlightcolor="#000000", anchor='n')

        self.Model_Label_Fish = tk.Label(self.Labelframe2, text='')
        self.Model_Label_Fish.place(relx=0.563, rely=0.688, height=20, width=100, bordermode='ignore')
        self.Model_Label_Fish.configure(background="#efefef", font="-family {Segoe UI} -size 8", foreground="#000000")

        self.Model_Label_PMN = tk.Label(self.Labelframe2, text='')
        self.Model_Label_PMN.place(relx=0.7, rely=0.688, height=20, width=100, bordermode='ignore')
        self.Model_Label_PMN.configure(background="#efefef", font="-family {Segoe UI} -size 8", foreground="#000000")

        self.Model_Label_Coral = tk.Label(self.Labelframe2, text='')
        self.Model_Label_Coral.place(relx=0.836, rely=0.688, height=20, width=100, bordermode='ignore')
        self.Model_Label_Coral.configure(background="#efefef", font="-family {Segoe UI} -size 8", foreground="#000000")

        self.Model_Label_Algae = tk.Label(self.Labelframe2, text='')
        self.Model_Label_Algae.place(relx=0.631, rely=0.938, height=20, width=100, bordermode='ignore')
        self.Model_Label_Algae.configure(background="#efefef", font="-family {Segoe UI} -size 8", foreground="#000000")

        # Cameras Frame
        self.Labelframe4 = tk.LabelFrame(self.Frame1, text='''CAMERAS''')
        self.Labelframe4.place(relx=0.74, rely=0.058, relheight=0.925, relwidth=0.25)
        self.Labelframe4.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#efefef", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Label8 = tk.Label(self.Labelframe4, text='''Camera 1''')
        self.Label8.place(relx=0.051, rely=0.188, height=25, width=64, bordermode='ignore')
        self.Label8.configure(background="#efefef", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label9 = tk.Label(self.Labelframe4, text='''Camera 2''')
        self.Label9.place(relx=0.051, rely=0.375, height=25, width=64, bordermode='ignore')
        self.Label9.configure(background="#efefef", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label10 = tk.Label(self.Labelframe4, text='''Camera 3''')
        self.Label10.place(relx=0.051, rely=0.563, height=25, width=64, bordermode='ignore')
        self.Label10.configure(background="#efefef", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label11 = tk.Label(self.Labelframe4, text='''Camera 4''')
        self.Label11.place(relx=0.051, rely=0.75, height=20, width=64, bordermode='ignore')
        self.Label11.configure(background="#efefef", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Entry11 = tk.Entry(self.Labelframe4)
        self.Entry11.place(relx=0.23, rely=0.763, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry11.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                               foreground="#000000", state="disabled")
        self.Entry10 = tk.Entry(self.Labelframe4)
        self.Entry10.place(relx=0.23, rely=0.575, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry10.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                               foreground="#000000", state="disabled")
        self.Entry9 = tk.Entry(self.Labelframe4)
        self.Entry9.place(relx=0.23, rely=0.388, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry9.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", state="disabled")
        self.Entry8 = tk.Entry(self.Labelframe4)
        self.Entry8.place(relx=0.23, rely=0.2, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry8.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", state="disabled")

        # Visualization Window with Class Counts
        self.Visualization_window = tk.Frame(self.top)
        self.Visualization_window.place(relx=0.639, rely=0.202, relheight=0.566, relwidth=0.367)
        self.Visualization_window.configure(relief='solid', borderwidth="2", background="#efefef",
                                            highlightbackground="#d9d9d9", highlightcolor="#000000")

        self.Labelframe5 = tk.LabelFrame(self.Visualization_window, text='''VISUALISATION''')
        self.Labelframe5.place(relx=-0.012, rely=0.0, relheight=1.0, relwidth=1.103)
        self.Labelframe5.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#efefef", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Class_Label_Fish = tk.Label(self.Labelframe5, text='')
        self.Class_Label_Fish.place(relx=0.05, rely=0.85, height=20, width=300)  # Increased width for multiple classes
        self.Class_Label_Fish.configure(background="#efefef", font="-family {Segoe UI} -size 9", foreground="#000000")

        # Result Frame
        self.Frame2 = tk.Frame(self.top)
        self.Frame2.place(relx=0.638, rely=0.769, relheight=0.231, relwidth=0.377)
        self.Frame2.configure(relief='groove', borderwidth="2", background="#a7a7a7",
                              highlightbackground="#d9d9d9", highlightcolor="#000000")

        self.Labelframe6 = tk.LabelFrame(self.Frame2, text='''RESULT''')
        self.Labelframe6.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=0.976)
        self.Labelframe6.configure(relief='groove', font="-family {Segoe UI} -size 9 -weight bold",
                                   foreground="#000000", background="#d9d9d9", highlightbackground="#d9d9d9",
                                   highlightcolor="#000000")

        self.Label3 = tk.Label(self.Labelframe6, text='''Number of Nodules Detected''')
        self.Label3.place(relx=0.014, rely=0.437, height=21, width=151, bordermode='ignore')
        self.Label3.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label5 = tk.Label(self.Labelframe6, text='''Number of Fauna Detected''')
        self.Label5.place(relx=0.016, rely=0.656, height=21, width=170, bordermode='ignore')
        self.Label5.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Entry5 = tk.Entry(self.Labelframe6)
        self.Entry5.place(relx=0.832, rely=0.219, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry5.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Entry6 = tk.Entry(self.Labelframe6)
        self.Entry6.place(relx=0.832, rely=0.437, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry6.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Entry7 = tk.Entry(self.Labelframe6)
        self.Entry7.place(relx=0.832, rely=0.656, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry7.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Label4 = tk.Label(self.Labelframe6, text='''Distance between Cam & Seabed''')
        self.Label4.place(relx=0.488, rely=0.437, height=21, width=178, bordermode='ignore')
        self.Label4.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label2 = tk.Label(self.Labelframe6, text='''Number of Flora Detected''')
        self.Label2.place(relx=0.488, rely=0.219, height=20, width=164, bordermode='ignore')
        self.Label2.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Entry2 = tk.Entry(self.Labelframe6)
        self.Entry2.place(relx=0.326, rely=0.219, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry2.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Entry3 = tk.Entry(self.Labelframe6)
        self.Entry3.place(relx=0.326, rely=0.437, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry3.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Entry4 = tk.Entry(self.Labelframe6)
        self.Entry4.place(relx=0.326, rely=0.656, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry4.configure(background="white", disabledforeground="#a3a3a3", font="-family {Courier New} -size 10",
                              foreground="#000000", insertbackground="#000000", selectbackground="#d9d9d9", selectforeground="black")

        self.Label1 = tk.Label(self.Labelframe6, text='''Approximate Frame's Area''')
        self.Label1.place(relx=0.016, rely=0.219, height=20, width=163, bordermode='ignore')
        self.Label1.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        self.Label7 = tk.Label(self.Labelframe6, text='''Seabed''')
        self.Label7.place(relx=0.198, rely=0.546, height=21, width=56, bordermode='ignore')
        self.Label7.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 9", foreground="#000000")

        self.Label6 = tk.Label(self.Labelframe6, text='''Number of Algae''')
        self.Label6.place(relx=0.496, rely=0.656, height=21, width=162, bordermode='ignore')
        self.Label6.configure(activebackground="#d9d9d9", background="#d9d9d9", font="-family {Segoe UI} -size 10", foreground="#000000")

        # Display Window
        self.Display_Window = tk.Label(self.top, text='''LABEL''')
        self.Display_Window.place(relx=-0.007, rely=0.202, height=639, width=991)
        self.Display_Window.configure(activebackground="#d9d9d9", background="#ffffff", borderwidth="7",
                                      disabledforeground="#000000", font="-family {Segoe UI} -size 9",
                                      foreground="white", highlightbackground="#d9d9d9", highlightcolor="#000000",
                                      anchor='w')

    # New and Updated Functions
    def toggle_ip_entry(self):
        state = "normal" if self.che63.get() else "disabled"
        for entry in [self.Entry8, self.Entry9, self.Entry10, self.Entry11]:
            entry.configure(state=state)

    def update_values(self, event):
        self.apply_changes()  # Update results dynamically when sliders or entry change

    def browse_image(self):
        global current_image
        filename = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp")])
        if filename:
            image = cv2.imread(filename)
            current_image = image
            self.display_image(image)

    def browse_video(self):
        global cap
        filename = filedialog.askopenfilename(filetypes=[("Video files", "*.mp4 *.avi *.mov")])
        if filename:
            cap = cv2.VideoCapture(filename)
            self.play_video()

    def play_video(self):
        global cap
        if cap and cap.isOpened():
            ret, frame = cap.read()
            if ret:
                global current_image
                current_image = frame
                self.display_image(frame)
                self.apply_changes()  # Update detection and counts live
                self.top.after(33, self.play_video)
            else:
                cap.release()

    def display_image(self, image):
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        h, w = image.shape[:2]
        scale = min(991/w, 639/h)
        new_w, new_h = int(w * scale), int(h * scale)
        resized = cv2.resize(image_rgb, (new_w, new_h))
        img = Image.fromarray(resized)
        photo = ImageTk.PhotoImage(image=img)
        self.Display_Window.configure(image=photo)
        self.Display_Window.image = photo

    def calculate_frame_area(self, image):
        if image is not None:
            h, w = image.shape[:2]
            area = (h * w) / 10000  # Approximate area in m² (adjust scale as needed)
            return f"{area:.2f}"
        return "279.55"  # Default value from screenshot

    def calculate_distance(self, focal_length):
        if focal_length and focal_length != "1":
            try:
                focal_length = float(focal_length) / 1000  # Convert mm to meters
                assumed_object_size = 0.1  # meters (e.g., fish length)
                object_size_in_image = max(current_image.shape[:2]) / 100  # Approximate in meters
                distance = (focal_length * assumed_object_size) / object_size_in_image if object_size_in_image > 0 else 5.0
                return f"{distance:.2f}"
            except ValueError:
                return "5.00"
        return "5.00"  # Default value to avoid zero

    def apply_changes(self):
        global current_image
        if current_image is not None:
            scale_factor = self.Scale1.get() / 100.0
            min_neighbors = int(self.Scale2.get())
            focal_length = self.Entry1.get() or "1"

            processed = current_image.copy()
            class_counts = {}  # Dynamic dictionary for fish classes

            if model_paths:
                for dataset, model_path in model_paths.items():
                    if model_path.endswith('.pt'):  # YOLO model
                        model = YOLO(model_path)
                        results = model(processed)
                        annotated_frame = results[0].plot()  # Plots bounding boxes with labels
                        processed = annotated_frame
                        for result in results:
                            for box in result.boxes:
                                cls = int(box.cls[0])
                                conf = box.conf[0]
                                label = model.names[cls] if hasattr(model, 'names') else dataset
                                if dataset == "Fish":
                                    class_counts[label] = class_counts.get(label, 0) + 1

            if scale_factor > 0:
                h, w = processed.shape[:2]
                processed = cv2.resize(processed, (int(w * scale_factor), int(h * scale_factor)))

            self.display_image(processed)

            # Update result fields
            self.Entry2.delete(0, tk.END)
            self.Entry2.insert(0, self.calculate_frame_area(processed))
            self.Entry6.delete(0, tk.END)
            self.Entry6.insert(0, "0")  # Number of Nodules Detected
            self.Entry3.delete(0, tk.END)
            self.Entry3.insert(0, self.calculate_distance(focal_length))  # Distance between Cam & Seabed
            self.Entry4.delete(0, tk.END)
            self.Entry4.insert(0, str(sum(class_counts.values()) if class_counts else 0))  # Number of Fauna
            self.Entry5.delete(0, tk.END)
            self.Entry5.insert(0, "0")  # Number of Flora (assuming no coral in this case)
            self.Entry7.delete(0, tk.END)
            self.Entry7.insert(0, "0")  # Number of Algae

            # Update visualization class counts
            if class_counts:
                vis_text = ", ".join([f"{k}: {v}" for k, v in class_counts.items()])
                self.Class_Label_Fish.configure(text=vis_text)
            else:
                self.Class_Label_Fish.configure(text="")

    def single_camera_view(self):
        global cap
        if self.che63.get():  # IP Camera
            ip = self.Entry8.get()
            if ip.startswith("rtsp://"):
                cap = cv2.VideoCapture(ip)
            else:
                messagebox.showerror("Error", "Please enter a valid RTSP URL")
                return
        else:
            cap = cv2.VideoCapture(0)
        self.play_video()

    def single_camera_capture(self):
        global cap
        if cap and cap.isOpened():
            ret, frame = cap.read()
            if ret:
                filename = os.path.join(CAPTURE_PATH, f"single_capture_{int(time.time())}.jpg")
                cv2.imwrite(filename, frame)

    def multiple_camera_view(self):
        global cap, camera_window
        if camera_window:
            camera_window.destroy()
        camera_window = tk.Toplevel(self.top)
        camera_window.title("Multiple Camera View")
        labels = [tk.Label(camera_window) for _ in range(4)]
        for label in labels:
            label.pack(side=tk.LEFT)
        caps = []
        for i, entry in enumerate([self.Entry8, self.Entry9, self.Entry10, self.Entry11]):
            ip = entry.get()
            if self.che63.get() and ip.startswith("rtsp://"):
                caps.append(cv2.VideoCapture(ip))
            else:
                caps.append(cv2.VideoCapture(i if i < 2 else 0))  # Fallback to default cameras

        def update_multi_view():
            all_open = all(c.isOpened() for c in caps)
            if all_open:
                frames = [c.read()[1] for c in caps if c.read()[0]]
                for frame, label in zip(frames, labels):
                    img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    img = Image.fromarray(img_rgb)
                    photo = ImageTk.PhotoImage(image=img)
                    label.configure(image=photo)
                    label.image = photo
                camera_window.after(33, update_multi_view)
            else:
                for c in caps:
                    c.release()
                camera_window.destroy()

        update_multi_view()

    def multiple_camera_capture(self):
        global cap
        if cap and cap.isOpened():
            ret, frame = cap.read()
            if ret:
                filename = os.path.join(CAPTURE_PATH, f"multi_capture_{int(time.time())}.jpg")
                cv2.imwrite(filename, frame)

    def image_stitching(self):
        files = filedialog.askopenfilenames(filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp")])
        if len(files) >= 2:
            images = [cv2.imread(f) for f in files]
            stitcher = cv2.Stitcher_create()
            status, stitched = stitcher.stitch(images)
            if status == cv2.Stitcher_OK:
                self.display_image(stitched)

    def video_stitching(self):
        pass  # Placeholder

    def single_camera_popout(self):
        global cap
        if cap and cap.isOpened():
            popout = tk.Toplevel(self.top)
            popout.title("Single Camera Popout")
            label = tk.Label(popout)
            label.pack()

            def update_popout():
                ret, frame = cap.read()
                if ret:
                    img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    img = Image.fromarray(img_rgb)
                    photo = ImageTk.PhotoImage(image=img)
                    label.configure(image=photo)
                    label.image = photo
                    popout.after(33, update_popout)
                else:
                    popout.destroy()

            update_popout()

    def multiple_camera_popout(self):
        self.multiple_camera_view()

    def three_sixty_view(self):
        if current_image is not None:
            rotated = cv2.rotate(current_image, cv2.ROTATE_90_CLOCKWISE)
            self.display_image(rotated)

    def select_model(self, dataset):
        if getattr(self, f"che{51 if dataset == 'Algae' else 47 if dataset == 'PMN' else 48 if dataset == 'Fish' else 49}").get():
            filetypes = [("Model files", "*.pt"), ("All files", "*.*")]  # Restrict to .pt for YOLO
            model_path = filedialog.askopenfilename(filetypes=filetypes, title=f"Select model for {dataset}")
            if model_path:
                model_paths[dataset] = model_path
                # Do not display model path in label
                label = getattr(self, f"Model_Label_{'Coral' if dataset == 'Coral Reef' else dataset}")
                label.configure(text="")
            else:
                getattr(self, f"che{51 if dataset == 'Algae' else 47 if dataset == 'PMN' else 48 if dataset == 'Fish' else 49}").set(0)
        else:
            model_paths.pop(dataset, None)
            label = getattr(self, f"Model_Label_{'Coral' if dataset == 'Coral Reef' else dataset}")
            label.configure(text="")

def start_up():
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    _top1 = root
    _w1 = Toplevel1(_top1)
    root.mainloop()

if __name__ == '__main__':
    start_up()