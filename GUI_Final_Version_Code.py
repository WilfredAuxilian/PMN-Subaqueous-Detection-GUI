#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jan 26, 2025 04:20:49 PM IST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import tkinter.messagebox as messagebox  # For popup messages
import os.path
from tkinter import filedialog
from PIL import Image, ImageTk
import cv2
import torch
import torchvision
from ultralytics import YOLO  # For YOLO model integration

_location = os.path.dirname(__file__)

import SAM5_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: SAM5_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1536x793+-8+-8")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(borderwidth="7")
        top.configure(background="#a09ec7")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")
        top.configure(takefocus="50")

        self.top = top
        self.che63 = tk.IntVar()
        self.che64 = tk.IntVar()
        self.che51 = tk.IntVar()
        self.che50 = tk.IntVar()
        self.che47 = tk.IntVar()
        self.che48 = tk.IntVar()
        self.che49 = tk.IntVar()

        self.dataset_paths = {
            "FISH": None,
            "PMN": None,
            "CORAL": None,
            "ALGAE": None,
            "REEF": None
        }
        self.dataset_types = {
            "FISH": None,
            "PMN": None,
            "CORAL": None,
            "ALGAE": None,
            "REEF": None
        }
        self.file_path = None  # To store the selected image/video path internally

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        _style_code()
        self.Option_label = ttk.Label(self.top)
        self.Option_label.place(relx=0.762, rely=0.605, height=27, width=62)
        self.Option_label.configure(background="#7787d2")
        self.Option_label.configure(font="-family {Segoe UI} -size 12")
        self.Option_label.configure(relief="flat")
        self.Option_label.configure(anchor='center')
        self.Option_label.configure(text='''Options''')
        self.Option_label.configure(compound='left')

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=-0.007, rely=-0.013, relheight=0.218, relwidth=1.02)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="#000000")

        self.Labelframe3 = tk.LabelFrame(self.Frame1)
        self.Labelframe3.place(relx=0.501, rely=0.058, relheight=0.925, relwidth=0.25)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe3.configure(foreground="#000000")
        self.Labelframe3.configure(labelanchor="n")
        self.Labelframe3.configure(text='''INPUT PARAMETERS''')
        self.Labelframe3.configure(background="#efefef")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="#000000")

        self.Scale1 = tk.Scale(self.Labelframe3, from_=0, to=300, resolution=1)
        self.Scale1.place(relx=0.444, rely=0.125, relheight=0.263, relwidth=0.431)
        self.Scale1.configure(activebackground="#d9d9d9")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(font="-family {Segoe UI} -size 9")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="#000000")
        self.Scale1.configure(length="166")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(troughcolor="#c4c4c4")
        self.Scale1.set(0)

        self.Scale2 = tk.Scale(self.Labelframe3, from_=1.0, to=10.0, resolution=0.1)
        self.Scale2.place(relx=0.444, rely=0.438, relheight=0.263, relwidth=0.431)
        self.Scale2.configure(activebackground="#d9d9d9")
        self.Scale2.configure(background="#d9d9d9")
        self.Scale2.configure(font="-family {Segoe UI} -size 9")
        self.Scale2.configure(foreground="#000000")
        self.Scale2.configure(highlightbackground="#d9d9d9")
        self.Scale2.configure(highlightcolor="#000000")
        self.Scale2.configure(length="166")
        self.Scale2.configure(orient="horizontal")
        self.Scale2.configure(troughcolor="#c4c4c4")
        self.Scale2.set(1.1)

        # Focal Length Entry (dedicated for camera focal length)
        self.Entry1 = tk.Entry(self.Labelframe3)
        self.Entry1.place(relx=0.444, rely=0.781, height=20, relwidth=0.418, bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="-family {Courier New} -size 10")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="#000000")
        self.Entry1.configure(insertbackground="#000000")
        self.Entry1.configure(selectbackground="#d9d9d9")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.insert(0, "Enter Focal Length (mm)")  # Placeholder text

        self.Button14 = tk.Button(self.Labelframe3)
        self.Button14.place(relx=0.051, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Button14.configure(activebackground="#d9d9d9")
        self.Button14.configure(activeforeground="black")
        self.Button14.configure(background="#d9d9d9")
        self.Button14.configure(disabledforeground="#a3a3a3")
        self.Button14.configure(font="-family {Segoe UI} -size 9")
        self.Button14.configure(foreground="#000000")
        self.Button14.configure(highlightbackground="#d9d9d9")
        self.Button14.configure(highlightcolor="#000000")
        self.Button14.configure(text='''Scaling Factor''')

        self.Button15 = tk.Button(self.Labelframe3)
        self.Button15.place(relx=0.051, rely=0.75, height=26, width=127, bordermode='ignore')
        self.Button15.configure(activebackground="#d9d9d9")
        self.Button15.configure(activeforeground="black")
        self.Button15.configure(background="#d9d9d9")
        self.Button15.configure(disabledforeground="#a3a3a3")
        self.Button15.configure(font="-family {Segoe UI} -size 9")
        self.Button15.configure(foreground="#000000")
        self.Button15.configure(highlightbackground="#d9d9d9")
        self.Button15.configure(highlightcolor="#000000")
        self.Button15.configure(text='''Focal Length''')

        self.Button13 = tk.Button(self.Labelframe3)
        self.Button13.place(relx=0.051, rely=0.2, height=26, width=127, bordermode='ignore')
        self.Button13.configure(activebackground="#d9d9d9")
        self.Button13.configure(activeforeground="black")
        self.Button13.configure(background="#d9d9d9")
        self.Button13.configure(disabledforeground="#a3a3a3")
        self.Button13.configure(font="-family {Segoe UI} -size 9")
        self.Button13.configure(foreground="#000000")
        self.Button13.configure(highlightbackground="#d9d9d9")
        self.Button13.configure(highlightcolor="#000000")
        self.Button13.configure(text='''Min Neighbour''')

        self.Labelframe1 = tk.LabelFrame(self.Frame1)
        self.Labelframe1.place(relx=-0.006, rely=0.058, relheight=0.925, relwidth=0.138)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(labelanchor="n")
        self.Labelframe1.configure(text='''POST PROCESSING''')
        self.Labelframe1.configure(background="#efefef")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="#000000")

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.231, rely=0.188, height=26, width=127, bordermode='ignore')
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 9")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="#000000")
        self.Button1.configure(text='''Browse Image''')
        self.Button1.configure(command=self.browse_image)

        self.Button2 = tk.Button(self.Labelframe1)
        self.Button2.place(relx=0.231, rely=0.438, height=26, width=127, bordermode='ignore')
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="black")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Segoe UI} -size 9")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="#000000")
        self.Button2.configure(text='''Browse Video''')
        self.Button2.configure(command=self.browse_video)

        self.Button3 = tk.Button(self.Labelframe1)
        self.Button3.place(relx=0.231, rely=0.688, height=26, width=127, bordermode='ignore')
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="black")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font="-family {Segoe UI} -size 9")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="#000000")
        self.Button3.configure(text='''Apply changes''')
        self.Button3.configure(command=self.apply_changes)

        self.Labelframe2 = tk.LabelFrame(self.Frame1)
        self.Labelframe2.place(relx=0.128, rely=0.058, relheight=0.925, relwidth=0.374)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe2.configure(foreground="#000000")
        self.Labelframe2.configure(labelanchor="n")
        self.Labelframe2.configure(text='''REAL TIME DETECTION''')
        self.Labelframe2.configure(background="#efefef")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="#000000")

        self.Button4 = tk.Button(self.Labelframe2)
        self.Button4.place(relx=0.036, rely=0.125, height=26, width=127, bordermode='ignore')
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="black")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(font="-family {Segoe UI} -size 9")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="#000000")
        self.Button4.configure(text='''Single Camera''')

        self.Button8 = tk.Button(self.Labelframe2)
        self.Button8.place(relx=0.295, rely=0.313, height=26, width=57, bordermode='ignore')
        self.Button8.configure(activebackground="#d9d9d9")
        self.Button8.configure(activeforeground="black")
        self.Button8.configure(background="#d9d9d9")
        self.Button8.configure(disabledforeground="#a3a3a3")
        self.Button8.configure(font="-family {Segoe UI} -size 9")
        self.Button8.configure(foreground="#000000")
        self.Button8.configure(highlightbackground="#d9d9d9")
        self.Button8.configure(highlightcolor="#000000")
        self.Button8.configure(text='''Pop Out''')

        self.Button5 = tk.Button(self.Labelframe2)
        self.Button5.place(relx=0.036, rely=0.313, height=26, width=127, bordermode='ignore')
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="black")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(font="-family {Segoe UI} -size 9")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="#000000")
        self.Button5.configure(text='''Multiple Camera''')

        self.Button6 = tk.Button(self.Labelframe2)
        self.Button6.place(relx=0.418, rely=0.125, height=26, width=57, bordermode='ignore')
        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(activeforeground="black")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(font="-family {Segoe UI} -size 9")
        self.Button6.configure(foreground="#000000")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="#000000")
        self.Button6.configure(text='''Capture''')

        self.Button7 = tk.Button(self.Labelframe2)
        self.Button7.place(relx=0.418, rely=0.313, height=26, width=57, bordermode='ignore')
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="black")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(font="-family {Segoe UI} -size 9")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="#000000")
        self.Button7.configure(text='''Capture''')

        self.Button10 = tk.Button(self.Labelframe2)
        self.Button10.place(relx=0.036, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Button10.configure(activebackground="#d9d9d9")
        self.Button10.configure(activeforeground="black")
        self.Button10.configure(background="#d9d9d9")
        self.Button10.configure(disabledforeground="#a3a3a3")
        self.Button10.configure(font="-family {Segoe UI} -size 9")
        self.Button10.configure(foreground="#000000")
        self.Button10.configure(highlightbackground="#d9d9d9")
        self.Button10.configure(highlightcolor="#000000")
        self.Button10.configure(text='''Image Stitching''')

        self.Button12 = tk.Button(self.Labelframe2)
        self.Button12.place(relx=0.157, rely=0.688, height=36, width=157, bordermode='ignore')
        self.Button12.configure(activebackground="#d9d9d9")
        self.Button12.configure(activeforeground="black")
        self.Button12.configure(background="#d9d9d9")
        self.Button12.configure(disabledforeground="#a3a3a3")
        self.Button12.configure(font="-family {Segoe UI} -size 9")
        self.Button12.configure(foreground="#000000")
        self.Button12.configure(highlightbackground="#d9d9d9")
        self.Button12.configure(highlightcolor="#000000")
        self.Button12.configure(text='''360 view''')

        self.Button11 = tk.Button(self.Labelframe2)
        self.Button11.place(relx=0.295, rely=0.5, height=26, width=127, bordermode='ignore')
        self.Button11.configure(activebackground="#d9d9d9")
        self.Button11.configure(activeforeground="black")
        self.Button11.configure(background="#d9d9d9")
        self.Button11.configure(disabledforeground="#a3a3a3")
        self.Button11.configure(font="-family {Segoe UI} -size 9")
        self.Button11.configure(foreground="#000000")
        self.Button11.configure(highlightbackground="#d9d9d9")
        self.Button11.configure(highlightcolor="#000000")
        self.Button11.configure(text='''Video Stitching''')

        self.Button9 = tk.Button(self.Labelframe2)
        self.Button9.place(relx=0.295, rely=0.125, height=26, width=57, bordermode='ignore')
        self.Button9.configure(activebackground="#d9d9d9")
        self.Button9.configure(activeforeground="black")
        self.Button9.configure(background="#d9d9d9")
        self.Button9.configure(disabledforeground="#a3a3a3")
        self.Button9.configure(font="-family {Segoe UI} -size 9")
        self.Button9.configure(foreground="#000000")
        self.Button9.configure(highlightbackground="#d9d9d9")
        self.Button9.configure(highlightcolor="#000000")
        self.Button9.configure(text='''Pop Out''')

        self.Checkbutton6 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton6.place(relx=0.546, rely=0.125, relheight=0.219, relwidth=0.172, bordermode='ignore')
        self.Checkbutton6.configure(activebackground="#d9d9d9")
        self.Checkbutton6.configure(activeforeground="black")
        self.Checkbutton6.configure(anchor='w')
        self.Checkbutton6.configure(background="#d9d9d9")
        self.Checkbutton6.configure(compound='left')
        self.Checkbutton6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton6.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton6.configure(foreground="#000000")
        self.Checkbutton6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton6.configure(highlightcolor="#000000")
        self.Checkbutton6.configure(justify='left')
        self.Checkbutton6.configure(text='''IP CAMERAS''')
        self.Checkbutton6.configure(variable=self.che63)
        self.Checkbutton6.configure(command=self.toggle_ip_entries)

        self.Checkbutton7 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton7.place(relx=0.751, rely=0.125, relheight=0.219, relwidth=0.222, bordermode='ignore')
        self.Checkbutton7.configure(activebackground="#d9d9d9")
        self.Checkbutton7.configure(activeforeground="black")
        self.Checkbutton7.configure(anchor='w')
        self.Checkbutton7.configure(background="#d9d9d9")
        self.Checkbutton7.configure(compound='left')
        self.Checkbutton7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton7.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton7.configure(foreground="#000000")
        self.Checkbutton7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton7.configure(highlightcolor="#000000")
        self.Checkbutton7.configure(justify='left')
        self.Checkbutton7.configure(text='''STATIC CAMERA''')
        self.Checkbutton7.configure(variable=self.che64)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton5.place(relx=0.631, rely=0.75, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#d9d9d9")
        self.Checkbutton5.configure(activeforeground="black")
        self.Checkbutton5.configure(anchor='w')
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(compound='left')
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="#000000")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(text='''ALGAE''')
        self.Checkbutton5.configure(variable=self.che51)
        self.Checkbutton5.configure(command=lambda: self.browse_dataset("ALGAE", self.che51))

        self.Checkbutton4 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton4.place(relx=0.785, rely=0.75, relheight=0.156, relwidth=0.108, bordermode='ignore')
        self.Checkbutton4.configure(activebackground="#d9d9d9")
        self.Checkbutton4.configure(activeforeground="black")
        self.Checkbutton4.configure(anchor='w')
        self.Checkbutton4.configure(background="#d9d9d9")
        self.Checkbutton4.configure(compound='left')
        self.Checkbutton4.configure(disabledforeground="#a3a3a3")
        self.Checkbutton4.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton4.configure(foreground="#000000")
        self.Checkbutton4.configure(highlightbackground="#d9d9d9")
        self.Checkbutton4.configure(highlightcolor="#000000")
        self.Checkbutton4.configure(justify='left')
        self.Checkbutton4.configure(text='''REEF''')
        self.Checkbutton4.configure(variable=self.che50)
        self.Checkbutton4.configure(command=lambda: self.browse_dataset("REEF", self.che50))

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton1.place(relx=0.7, rely=0.563, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(activeforeground="black")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="#000000")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''PMN''')
        self.Checkbutton1.configure(variable=self.che47)
        self.Checkbutton1.configure(command=lambda: self.browse_dataset("PMN", self.che47))

        self.Checkbutton2 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton2.place(relx=0.563, rely=0.563, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton2.configure(activebackground="#d9d9d9")
        self.Checkbutton2.configure(activeforeground="black")
        self.Checkbutton2.configure(anchor='w')
        self.Checkbutton2.configure(background="#d9d9d9")
        self.Checkbutton2.configure(compound='left')
        self.Checkbutton2.configure(disabledforeground="#a3a3a3")
        self.Checkbutton2.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton2.configure(foreground="#000000")
        self.Checkbutton2.configure(highlightbackground="#d9d9d9")
        self.Checkbutton2.configure(highlightcolor="#000000")
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(text='''FISH''')
        self.Checkbutton2.configure(variable=self.che48)
        self.Checkbutton2.configure(command=lambda: self.browse_dataset("FISH", self.che48))

        self.Checkbutton3 = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton3.place(relx=0.836, rely=0.563, relheight=0.156, relwidth=0.109, bordermode='ignore')
        self.Checkbutton3.configure(activebackground="#d9d9d9")
        self.Checkbutton3.configure(activeforeground="black")
        self.Checkbutton3.configure(anchor='w')
        self.Checkbutton3.configure(background="#d9d9d9")
        self.Checkbutton3.configure(compound='left')
        self.Checkbutton3.configure(disabledforeground="#a3a3a3")
        self.Checkbutton3.configure(font="-family {Segoe UI} -size 9")
        self.Checkbutton3.configure(foreground="#000000")
        self.Checkbutton3.configure(highlightbackground="#d9d9d9")
        self.Checkbutton3.configure(highlightcolor="#000000")
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(text='''CORAL''')
        self.Checkbutton3.configure(variable=self.che49)
        self.Checkbutton3.configure(command=lambda: self.browse_dataset("CORAL", self.che49))

        self.Label12 = tk.Label(self.Labelframe2)
        self.Label12.place(relx=0.666, rely=0.438, height=21, width=125, bordermode='ignore')
        self.Label12.configure(activebackground="#d9d9d9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(anchor='n')
        self.Label12.configure(background="#efefef")
        self.Label12.configure(compound='left')
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="#000000")
        self.Label12.configure(text='''Datasets''')

        self.Labelframe4 = tk.LabelFrame(self.Frame1)
        self.Labelframe4.place(relx=0.74, rely=0.058, relheight=0.925, relwidth=0.25)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe4.configure(foreground="#000000")
        self.Labelframe4.configure(labelanchor="n")
        self.Labelframe4.configure(text='''CAMERAS''')
        self.Labelframe4.configure(background="#efefef")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="#000000")

        self.Label8 = tk.Label(self.Labelframe4)
        self.Label8.place(relx=0.051, rely=0.188, height=25, width=64, bordermode='ignore')
        self.Label8.configure(activebackground="#d9d9d9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(anchor='w')
        self.Label8.configure(background="#efefef")
        self.Label8.configure(compound='left')
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(font="-family {Segoe UI} -size 10")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="#000000")
        self.Label8.configure(text='''Camera 1''')

        self.Label9 = tk.Label(self.Labelframe4)
        self.Label9.place(relx=0.051, rely=0.375, height=25, width=64, bordermode='ignore')
        self.Label9.configure(activebackground="#d9d9d9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(anchor='w')
        self.Label9.configure(background="#efefef")
        self.Label9.configure(compound='left')
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font="-family {Segoe UI} -size 10")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="#000000")
        self.Label9.configure(text='''Camera 2''')

        self.Label10 = tk.Label(self.Labelframe4)
        self.Label10.place(relx=0.051, rely=0.563, height=25, width=64, bordermode='ignore')
        self.Label10.configure(activebackground="#d9d9d9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(anchor='w')
        self.Label10.configure(background="#efefef")
        self.Label10.configure(compound='left')
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(font="-family {Segoe UI} -size 10")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="#000000")
        self.Label10.configure(text='''Camera 3''')

        self.Label11 = tk.Label(self.Labelframe4)
        self.Label11.place(relx=0.051, rely=0.75, height=20, width=64, bordermode='ignore')
        self.Label11.configure(activebackground="#d9d9d9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(anchor='w')
        self.Label11.configure(background="#efefef")
        self.Label11.configure(compound='left')
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(font="-family {Segoe UI} -size 10")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="#000000")
        self.Label11.configure(text='''Camera 4''')

        self.Entry11 = tk.Entry(self.Labelframe4)
        self.Entry11.place(relx=0.23, rely=0.763, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry11.configure(background="white")
        self.Entry11.configure(disabledforeground="#a3a3a3")
        self.Entry11.configure(font="-family {Courier New} -size 10")
        self.Entry11.configure(foreground="#000000")
        self.Entry11.configure(highlightbackground="#d9d9d9")
        self.Entry11.configure(highlightcolor="#000000")
        self.Entry11.configure(insertbackground="#000000")
        self.Entry11.configure(selectbackground="#d9d9d9")
        self.Entry11.configure(selectforeground="black")
        self.Entry11.configure(state='disabled')

        self.Entry10 = tk.Entry(self.Labelframe4)
        self.Entry10.place(relx=0.23, rely=0.575, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry10.configure(background="white")
        self.Entry10.configure(disabledforeground="#a3a3a3")
        self.Entry10.configure(font="-family {Courier New} -size 10")
        self.Entry10.configure(foreground="#000000")
        self.Entry10.configure(highlightbackground="#d9d9d9")
        self.Entry10.configure(highlightcolor="#000000")
        self.Entry10.configure(insertbackground="#000000")
        self.Entry10.configure(selectbackground="#d9d9d9")
        self.Entry10.configure(selectforeground="black")
        self.Entry10.configure(state='disabled')

        self.Entry9 = tk.Entry(self.Labelframe4)
        self.Entry9.place(relx=0.23, rely=0.388, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry9.configure(background="white")
        self.Entry9.configure(disabledforeground="#a3a3a3")
        self.Entry9.configure(font="-family {Courier New} -size 10")
        self.Entry9.configure(foreground="#000000")
        self.Entry9.configure(highlightbackground="#d9d9d9")
        self.Entry9.configure(highlightcolor="#000000")
        self.Entry9.configure(insertbackground="#000000")
        self.Entry9.configure(selectbackground="#d9d9d9")
        self.Entry9.configure(selectforeground="black")
        self.Entry9.configure(state='disabled')

        self.Entry8 = tk.Entry(self.Labelframe4)
        self.Entry8.place(relx=0.23, rely=0.2, height=20, relwidth=0.65, bordermode='ignore')
        self.Entry8.configure(background="white")
        self.Entry8.configure(disabledforeground="#a3a3a3")
        self.Entry8.configure(font="-family {Courier New} -size 10")
        self.Entry8.configure(foreground="#000000")
        self.Entry8.configure(highlightbackground="#d9d9d9")
        self.Entry8.configure(highlightcolor="#000000")
        self.Entry8.configure(insertbackground="#000000")
        self.Entry8.configure(selectbackground="#d9d9d9")
        self.Entry8.configure(selectforeground="black")
        self.Entry8.configure(state='disabled')

        self.Visualization_window = tk.Frame(self.top)
        self.Visualization_window.place(relx=0.639, rely=0.202, relheight=0.566, relwidth=0.367)
        self.Visualization_window.configure(relief='solid')
        self.Visualization_window.configure(borderwidth="2")
        self.Visualization_window.configure(relief="solid")
        self.Visualization_window.configure(background="#efefef")
        self.Visualization_window.configure(highlightbackground="#d9d9d9")
        self.Visualization_window.configure(highlightcolor="#000000")

        self.Labelframe5 = tk.LabelFrame(self.Visualization_window)
        self.Labelframe5.place(relx=-0.012, rely=0.0, relheight=1.0, relwidth=1.103)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe5.configure(foreground="#000000")
        self.Labelframe5.configure(labelanchor="n")
        self.Labelframe5.configure(text='''VISUALISATION''')
        self.Labelframe5.configure(background="#efefef")
        self.Labelframe5.configure(highlightbackground="#d9d9d9")
        self.Labelframe5.configure(highlightcolor="#000000")

        self.Frame2 = tk.Frame(self.top)
        self.Frame2.place(relx=0.638, rely=0.769, relheight=0.231, relwidth=0.377)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#a7a7a7")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="#000000")

        self.Labelframe6 = tk.LabelFrame(self.Frame2)
        self.Labelframe6.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=0.976)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Labelframe6.configure(foreground="#000000")
        self.Labelframe6.configure(text='''RESULT''')
        self.Labelframe6.configure(background="#d9d9d9")
        self.Labelframe6.configure(highlightbackground="#d9d9d9")
        self.Labelframe6.configure(highlightcolor="#000000")

        self.Label2 = tk.Label(self.Labelframe6)
        self.Label2.place(relx=0.016, rely=0.219, height=20, width=164, bordermode='ignore')
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 10")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="#000000")
        self.Label2.configure(text='''Number of Flora Detected''')

        self.Entry2 = tk.Entry(self.Labelframe6)
        self.Entry2.place(relx=0.326, rely=0.219, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="-family {Courier New} -size 10")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="#000000")
        self.Entry2.configure(insertbackground="#000000")
        self.Entry2.configure(selectbackground="#d9d9d9")
        self.Entry2.configure(selectforeground="black")

        self.Label1 = tk.Label(self.Labelframe6)
        self.Label1.place(relx=0.488, rely=0.219, height=20, width=163, bordermode='ignore')
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 10")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="#000000")
        self.Label1.configure(text='''Approximate Frame's Area''')

        self.Entry5 = tk.Entry(self.Labelframe6)
        self.Entry5.place(relx=0.832, rely=0.219, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font="-family {Courier New} -size 10")
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(highlightbackground="#d9d9d9")
        self.Entry5.configure(highlightcolor="#000000")
        self.Entry5.configure(insertbackground="#000000")
        self.Entry5.configure(selectbackground="#d9d9d9")
        self.Entry5.configure(selectforeground="black")

        self.Label4 = tk.Label(self.Labelframe6)
        self.Label4.place(relx=0.014, rely=0.437, height=21, width=178, bordermode='ignore')
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 10")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="#000000")
        self.Label4.configure(text='''Number of Nodules Detected''')

        self.Entry3 = tk.Entry(self.Labelframe6)
        self.Entry3.place(relx=0.326, rely=0.437, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="-family {Courier New} -size 10")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="#000000")
        self.Entry3.configure(insertbackground="#000000")
        self.Entry3.configure(selectbackground="#d9d9d9")
        self.Entry3.configure(selectforeground="black")

        self.Label3 = tk.Label(self.Labelframe6)
        self.Label3.place(relx=0.488, rely=0.437, height=21, width=151, bordermode='ignore')
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 10")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="#000000")
        self.Label3.configure(text='''Distance between Cam & Seabed''')

        self.Entry6 = tk.Entry(self.Labelframe6)
        self.Entry6.place(relx=0.832, rely=0.437, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry6.configure(background="white")
        self.Entry6.configure(disabledforeground="#a3a3a3")
        self.Entry6.configure(font="-family {Courier New} -size 10")
        self.Entry6.configure(foreground="#000000")
        self.Entry6.configure(highlightbackground="#d9d9d9")
        self.Entry6.configure(highlightcolor="#000000")
        self.Entry6.configure(insertbackground="#000000")
        self.Entry6.configure(selectbackground="#d9d9d9")
        self.Entry6.configure(selectforeground="black")

        self.Label5 = tk.Label(self.Labelframe6)
        self.Label5.place(relx=0.016, rely=0.656, height=21, width=170, bordermode='ignore')
        self.Label5.configure(activebackground="#d9d9d9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font="-family {Segoe UI} -size 10")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="#000000")
        self.Label5.configure(text='''Number of Fauna Detected''')

        self.Entry4 = tk.Entry(self.Labelframe6)
        self.Entry4.place(relx=0.326, rely=0.656, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="-family {Courier New} -size 10")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="#000000")
        self.Entry4.configure(insertbackground="#000000")
        self.Entry4.configure(selectbackground="#d9d9d9")
        self.Entry4.configure(selectforeground="black")

        self.Label6 = tk.Label(self.Labelframe6)
        self.Label6.place(relx=0.496, rely=0.656, height=21, width=162, bordermode='ignore')
        self.Label6.configure(activebackground="#d9d9d9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(font="-family {Segoe UI} -size 10")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="#000000")
        self.Label6.configure(text='''Number of Algae''')

        self.Entry7 = tk.Entry(self.Labelframe6)
        self.Entry7.place(relx=0.832, rely=0.656, height=20, relwidth=0.131, bordermode='ignore')
        self.Entry7.configure(background="white")
        self.Entry7.configure(disabledforeground="#a3a3a3")
        self.Entry7.configure(font="-family {Courier New} -size 10")
        self.Entry7.configure(foreground="#000000")
        self.Entry7.configure(highlightbackground="#d9d9d9")
        self.Entry7.configure(highlightcolor="#000000")
        self.Entry7.configure(insertbackground="#000000")
        self.Entry7.configure(selectbackground="#d9d9d9")
        self.Entry7.configure(selectforeground="black")

        # Updated position of Label7 (Seabed) to the right side
        self.Label7 = tk.Label(self.Labelframe6)
        self.Label7.place(relx=0.496, rely=0.546, height=21, width=56, bordermode='ignore')
        self.Label7.configure(activebackground="#d9d9d9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(anchor='w')
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(font="-family {Segoe UI} -size 9")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="#000000")
        self.Label7.configure(text='''Seabed''')

        self.Display_Window = tk.Label(self.top)
        self.Display_Window.place(relx=-0.007, rely=0.202, height=639, width=991)
        self.Display_Window.configure(activebackground="#d9d9d9")
        self.Display_Window.configure(activeforeground="black")
        self.Display_Window.configure(anchor='w')
        self.Display_Window.configure(background="#ffffff")
        self.Display_Window.configure(borderwidth="7")
        self.Display_Window.configure(compound='left')
        self.Display_Window.configure(disabledforeground="#000000")
        self.Display_Window.configure(font="-family {Segoe UI} -size 9")
        self.Display_Window.configure(foreground="white")
        self.Display_Window.configure(highlightbackground="#d9d9d9")
        self.Display_Window.configure(highlightcolor="#000000")
        self.Display_Window.configure(text='''LABEL''')

    # Function to toggle IP camera entry fields
    def toggle_ip_entries(self):
        state = 'normal' if self.che63.get() else 'disabled'
        self.Entry8.configure(state=state)
        self.Entry9.configure(state=state)
        self.Entry10.configure(state=state)
        self.Entry11.configure(state=state)

    # Function to validate IP camera connection
    def validate_ip_camera(self, ip_address):
        if not ip_address:
            return None
        cap = cv2.VideoCapture(ip_address)
        is_valid = cap.isOpened()
        cap.release()
        return is_valid

    # Function to browse dataset
    def browse_dataset(self, dataset_name, var):
        if var.get():
            file_path = filedialog.askopenfilename(
                title=f"Select {dataset_name} Model",
                filetypes=[
                    ("Model files", "*.pt *.xml *.pth"),
                    ("YOLO models", "*.pt"),
                    ("Haar Cascade", "*.xml"),
                    ("Faster R-CNN", "*.pth"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                self.dataset_paths[dataset_name] = file_path
                if file_path.endswith('.pt'):
                    self.dataset_types[dataset_name] = 'yolo'
                elif file_path.endswith('.xml'):
                    self.dataset_types[dataset_name] = 'haar'
                elif file_path.endswith('.pth'):
                    self.dataset_types[dataset_name] = 'fasterrcnn'
                print(f"Selected {dataset_name} model: {file_path} ({self.dataset_types[dataset_name]})")
            else:
                var.set(0)
                self.dataset_paths[dataset_name] = None
                self.dataset_types[dataset_name] = None
        else:
            self.dataset_paths[dataset_name] = None
            self.dataset_types[dataset_name] = None

    # Function to browse and display an image
    def browse_image(self):
        file_path = filedialog.askopenfilename(
            title="Select Image",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp")]
        )
        if file_path:
            self.file_path = file_path  # Store the file path internally
            image = Image.open(file_path)
            image = image.resize((991, 639), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(image)
            self.Display_Window.configure(image=photo)
            self.Display_Window.image = photo

    # Function to browse a video
    def browse_video(self):
        file_path = filedialog.askopenfilename(
            title="Select Video",
            filetypes=[("Video files", "*.mp4 *.avi *.mov")]
        )
        if file_path:
            self.file_path = file_path  # Store the file path internally
            print(f"Selected video: {file_path}")

    # Function to calculate approximate frame area and distance
    def calculate_results(self, image, focal_length=None):
        height, width = image.shape[:2]
        
        # Approximate Frame's Area (in m²)
        # Assume a default pixel-to-meter ratio (e.g., 0.01 m/pixel) without calibration
        pixel_to_meter = 0.01  # Placeholder; adjust based on real-world data
        frame_area = (height * pixel_to_meter) * (width * pixel_to_meter)  # m²
        
        # Distance between Camera and Seabed (in meters)
        if focal_length and focal_length != "Enter Focal Length (mm)":
            try:
                focal_length = float(focal_length) / 1000  # Convert mm to meters
                # Simplified formula: Distance = (Focal Length * Real Object Size) / Object Size in Image
                assumed_object_size = 1.0  # meters (e.g., average fish size)
                object_size_in_image = max(height, width) * pixel_to_meter / 10  # Scaled estimate
                distance = (focal_length * assumed_object_size) / object_size_in_image
            except ValueError:
                distance = 5.0  # Default fallback if focal length is invalid
        else:
            # Default distance without focal length (e.g., average seabed depth)
            distance = 5.0  # meters (placeholder)

        return frame_area, distance

    # Function to apply changes and process detection
    def apply_changes(self):
        min_neighbour = self.Scale1.get()
        scaling_factor = self.Scale2.get()
        focal_length = self.Entry1.get()

        # Validate IP cameras
        if self.che63.get():
            ip_cameras = [self.Entry8.get(), self.Entry9.get(), self.Entry10.get(), self.Entry11.get()]
            entered_ips = [ip for ip in ip_cameras if ip]
            if entered_ips:
                valid_cameras = 0
                for ip in entered_ips:
                    if self.validate_ip_camera(ip):
                        valid_cameras += 1
                if valid_cameras > 0:
                    messagebox.showinfo("Camera Detection", "Cameras have been detected.")
                else:
                    messagebox.showerror("Camera Error", "No cameras have been detected or IP address might be wrong.")
                    return

        selected_datasets = {k: v for k, v in self.dataset_paths.items() if v is not None}
        if not selected_datasets:
            print("No datasets selected.")
            return

        if not self.file_path:
            print("No input file specified.")
            return

        image = cv2.imread(self.file_path)
        if image is None:
            print("Error loading image.")
            return

        total_counts = {"flora": 0, "fauna": 0, "nodules": 0, "algae": 0}
        annotated_frame = image.copy()

        for dataset, path in selected_datasets.items():
            model_type = self.dataset_types[dataset]
            try:
                if model_type == 'yolo':
                    model = YOLO(path)
                    results = model(self.file_path)
                    annotated_frame = results[0].plot()
                    for r in results:
                        for box in r.boxes:
                            if dataset == "FISH" or dataset == "CORAL":
                                total_counts["fauna"] += 1
                            elif dataset == "ALGAE":
                                total_counts["algae"] += 1
                            elif dataset == "REEF":
                                total_counts["flora"] += 1
                            elif dataset == "PMN":
                                total_counts["nodules"] += 1

                elif model_type == 'haar':
                    cascade = cv2.CascadeClassifier(path)
                    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                    detections = cascade.detectMultiScale(
                        gray,
                        scaleFactor=scaling_factor,
                        minNeighbors=int(min_neighbour)
                    )
                    for (x, y, w, h) in detections:
                        cv2.rectangle(annotated_frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    count = len(detections)
                    if dataset == "FISH" or dataset == "CORAL":
                        total_counts["fauna"] += count
                    elif dataset == "ALGAE":
                        total_counts["algae"] += count
                    elif dataset == "REEF":
                        total_counts["flora"] += count
                    elif dataset == "PMN":
                        total_counts["nodules"] += count

                elif model_type == 'fasterrcnn':
                    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False)
                    model.load_state_dict(torch.load(path))
                    model.eval()
                    transform = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])
                    img = transform(Image.open(self.file_path).convert("RGB")).unsqueeze(0)
                    with torch.no_grad():
                        predictions = model(img)
                    count = 0
                    for i, box in enumerate(predictions[0]['boxes']):
                        if predictions[0]['scores'][i] > 0.5:
                            x1, y1, x2, y2 = map(int, box)
                            cv2.rectangle(annotated_frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
                            count += 1
                    if dataset == "FISH" or dataset == "CORAL":
                        total_counts["fauna"] += count
                    elif dataset == "ALGAE":
                        total_counts["algae"] += count
                    elif dataset == "REEF":
                        total_counts["flora"] += count
                    elif dataset == "PMN":
                        total_counts["nodules"] += count

            except Exception as e:
                print(f"Error processing {dataset} ({model_type}): {e}")

        # Display annotated image
        self.display_image(annotated_frame)

        # Calculate additional results
        frame_area, distance = self.calculate_results(image, focal_length)

        # Update result fields with correct values
        # Clear all fields first to avoid leftover values
        self.Entry2.delete(0, tk.END)
        self.Entry3.delete(0, tk.END)
        self.Entry4.delete(0, tk.END)
        self.Entry5.delete(0, tk.END)
        self.Entry6.delete(0, tk.END)
        self.Entry7.delete(0, tk.END)

        # Assign values to the correct fields (after swapping labels)
        self.Entry2.insert(0, str(total_counts["flora"]))  # Number of Flora Detected
        self.Entry5.insert(0, f"{frame_area:.2f} m²")      # Approximate Frame's Area
        self.Entry3.insert(0, str(total_counts["nodules"]))  # Number of Nodules Detected
        self.Entry6.insert(0, f"{distance:.2f} m")         # Distance between Cam & Seabed
        self.Entry4.insert(0, str(total_counts["fauna"]))  # Number of Fauna Detected
        self.Entry7.insert(0, str(total_counts["algae"]))  # Number of Algae

    # Function to display image in Display_Window
    def display_image(self, frame):
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(frame_rgb)
        image = image.resize((991, 639), Image.Resampling.LANCZOS)
        photo = ImageTk.PhotoImage(image)
        self.Display_Window.configure(image=photo)
        self.Display_Window.image = photo

def start_up():
    SAM5_support.main()

if __name__ == '__main__':
    SAM5_support.main()
